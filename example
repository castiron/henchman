#!/bin/bash
###################
##~~~~~~~~~~~~~~~##
##~~~~Example~~~~##
##~~~~~~~~~~~~~~~##
###################

# See Option 2 in "Call upon the Henchman"
henchman_version="v2.0.1"
henchman_location="/tmp"
henchman_debug=false

# Your scripting should happen inside the main function: main(){ ...something scripty... }
main() {
    # 1) Variables
    echo -e "1) Variables\n"
    local var_scope="I'm scoped to the main function"
    local some_var="I can be assigned inline"
    local another_var
    another_var="or first declared then assigned later"
    echo "var_scope: ${var_scope}"
    echo "some_var: ${some_var}"
    echo "another_var: ${another_var}"
    echo -e "\n\n"


    # 2) Handling Henchman return value
    echo -e "2) Handling Henchman return value\n"
    ## Inline assignment
    local working_dir
    echo "hm get_working_directory && working_dir=\${hm_return}"
    hm get_working_directory && working_dir=${hm_return}
    echo "working_dir: ${working_dir}"

    ## Use return value without assignment
    ## Note: ${hm_return} will be overwritten on subsequent Henchman function call
    echo "hm file_exist? \"\${working_dir}/README.md\""
    hm file_exist? "${working_dir}/README.md"
    if [ ${hm_return} = true ]
    then
        echo "${working_dir}/README.md really exists!"
    else
        echo "${working_dir}/README.md does not exist."
    fi
    echo -e "\n\n"


    # 3) Main parameters
    echo -e "3) Main parameters\n"
    ## Example script called with params: example param1 param2
    ## Henchman stores these in global vars to allow for the bootstrap process to work the way that it does.
    echo "I was passed ${main_params_count} params."
    echo "Here is the param list: ${main_params_list}"
    echo "for param in \"\${main_params[@]}\""
    for param in "${main_params[@]}"
    do
        :
        echo "${param}"
    done
    echo -e "\n\n"

    # 4) Examples
    echo -e "4) Examples\n"
    install_composer(){
        echo "Callback install_composer() called because dependency 'composerr' doesn't exist."
    }
    echo "hm script_dependency_with_callback composerr install_composer && echo ${hm_return}"
    hm script_dependency_with_callback composerr install_composer && echo ${hm_return}

    echo -e "\n\n"

    # 5) Error handling
    echo -e "5) Error handling\n"
    ## Henchman provides some basic parameter validation and error handling
    ## When an error is thrown a basic call stack is displayed and the pid is killed to ensure all execution halts.

    # Call Henchman function with too many parameters
    echo "Example of function call with too many parameters:"
    echo "hm file_exist? \"this\" \"that\" \"something\""
    hm file_exist? "this" "that" "something"
}

# Call upon the Henchman

# Option 1 - Local development / static deployment
henchman_load() {
    source "henchman"
}

# Option 2 - Dynamic loading
# Note: relies on version and location to store henchman to be passed as params
#henchman_load() {
#    local hm_url="https://raw.githubusercontent.com/castiron/henchman/${henchman_version}/henchman"
#    local hm_local_file="${henchman_location}/henchman-${henchman_version}"
#    echo -e "Attempting to fetch Henchman ${henchman_version}\n"
#    if [ -e ${hm_local_file} ]
#    then
#        echo -e "Henchman ${henchman_version} is ready for action."
#    else
#        if hash curl 2>/dev/null; then
#            curl ${hm_url} -o ${hm_local_file}
#        elif hash wget 2>/dev/null; then
#            wget ${hm_url} -O ${hm_local_file}
#        else
#            echo "Error! curl or wget required to fetch Henchman."
#        fi
#    fi
#    source ${hm_local_file}
#}
# Minified: henchman_load() { local hm_url="https://raw.githubusercontent.com/castiron/henchman/${henchman_version}/henchman";local hm_local_file="${henchman_location}/henchman-${henchman_version}";echo -e "Attempting to fetch Henchman ${henchman_version}\n";if [ -e ${hm_local_file} ];then echo -e "Henchman ${henchman_version} is ready for action.";else if hash curl 2>/dev/null;then curl ${hm_url} -o ${hm_local_file};elif hash wget 2>/dev/null;then wget ${hm_url} -O ${hm_local_file};else echo "Error! curl or wget required to fetch Henchman.";fi;fi;source ${hm_local_file}; }
henchman_load $@
